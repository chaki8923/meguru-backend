AWSTemplateFormatVersion: '2010-09-09'
Description: Cost-optimized Go (Gin) App on App Runner with Aurora Serverless - Guaranteed Resource Cleanup
Parameters:
  ProjectName:
    Type: String
    Default: my-go-app
    Description: Project name for tagging and naming resources.
  AppRunnerCpu:
    Type: String
    Default: "0.5 vCPU"
    AllowedValues: ["0.25 vCPU", "0.5 vCPU", "1 vCPU", "2 vCPU"]
  AppRunnerMemory:
    Type: String
    Default: "1 GB"
    AllowedValues: ["0.5 GB", "1 GB", "2 GB", "3 GB"]
  AppRunnerMinSize:
    Type: Number
    Default: 1
  AppRunnerMaxSize:
    Type: Number
    Default: 2
  AppRunnerPort:
    Type: Number
    Default: 8080
  ImageRepositoryType:
    Type: String
    Default: ECR_PUBLIC
    AllowedValues: ["ECR_PUBLIC", "ECR"]
  ImageIdentifier:
    Type: String
    Description: Image identifier
  DatabaseName:
    Type: String
    Default: myappdb
  DatabaseUsername:
    Type: String
    Default: meguru
  DatabasePassword:
    Type: String
    NoEcho: true
    MinLength: 8
  MinAuroraCapacity:
    Type: Number
    Default: 0.5
  MaxAuroraCapacity:
    Type: Number
    Default: 1
Resources:
  # VPC
  VPC:
    Type: AWS::EC2::VPC
    DeletionPolicy: Delete
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-VPC"
  # Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet1"
  PublicSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicSubnet2"
  DatabaseSubnet1:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DatabaseSubnet1"
  DatabaseSubnet2:
    Type: AWS::EC2::Subnet
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DatabaseSubnet2"
  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    DeletionPolicy: Delete
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-IGW"
  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  # Route Table
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DeletionPolicy: Delete
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-PublicRouteTable"
  PublicRoute:
    Type: AWS::EC2::Route
    DeletionPolicy: Delete
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable
  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    DeletionPolicy: Delete
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable
  # Security Groups
  AppRunnerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Security Group for App Runner VPC Connector
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AppRunnerSG"
  DatabaseSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    DeletionPolicy: Delete
    Properties:
      GroupDescription: Security Group for Aurora Database
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DatabaseSG"
  # Security Group Rules
  AppRunnerSGEgressRule:
    Type: AWS::EC2::SecurityGroupEgress
    DeletionPolicy: Delete
    Properties:
      GroupId: !Ref AppRunnerSecurityGroup
      IpProtocol: tcp
      FromPort: 5432
      ToPort: 5432
      DestinationSecurityGroupId: !Ref DatabaseSecurityGroup
  # Aurora Resources
  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    DeletionPolicy: Delete
    Properties:
      DBSubnetGroupDescription: Subnet group for Aurora
      SubnetIds:
        - !Ref DatabaseSubnet1
        - !Ref DatabaseSubnet2
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-DBSubnetGroup"
  AuroraDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    DeletionPolicy: Delete
    Properties:
      Description: Cluster Parameter Group for Aurora Serverless
      Family: aurora-postgresql15
      Parameters:
        rds.force_ssl: "0"
  AuroraDBCluster:
    Type: AWS::RDS::DBCluster
    DeletionPolicy: Delete  # ★ 確実に削除
    Properties:
      Engine: aurora-postgresql
      EngineVersion: '15.3'
      DatabaseName: !Ref DatabaseName
      MasterUsername: !Ref DatabaseUsername
      MasterUserPassword: !Ref DatabasePassword
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref DatabaseSecurityGroup
      DBClusterParameterGroupName: !Ref AuroraDBClusterParameterGroup
      ServerlessV2ScalingConfiguration:
        MinCapacity: !Ref MinAuroraCapacity
        MaxCapacity: !Ref MaxAuroraCapacity
      BackupRetentionPeriod: 1
      DeletionProtection: false  # ★ 削除保護を無効
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AuroraCluster"
  AuroraDBInstance1:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Delete  # ★ 確実に削除
    Properties:
      DBInstanceIdentifier: !Sub "${ProjectName}-aurora-instance-1"
      DBInstanceClass: db.serverless
      Engine: aurora-postgresql
      DBClusterIdentifier: !Ref AuroraDBCluster
      PubliclyAccessible: false
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AuroraInstance1"
  # App Runner VPC Connector
  AppRunnerVPCConnector:
    Type: AWS::AppRunner::VpcConnector
    DeletionPolicy: Delete  # ★ 確実に削除
    Properties:
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref AppRunnerSecurityGroup
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AppRunnerVPCConnector"
  # App Runner ECR Access Role
  AppRunnerECRAccessRole:
    Type: AWS::IAM::Role
    Condition: IsECRPrivate
    DeletionPolicy: Delete  # ★ 確実に削除
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: build.apprunner.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AppRunnerECRAccessPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "ecr:GetDownloadUrlForLayer"
                  - "ecr:BatchGetImage"
                  - "ecr:BatchCheckLayerAvailability"
                  - "ecr:DescribeImages"
                  - "ecr:GetAuthorizationToken"
                Resource: "*"
  # ★ 重要: 確実に削除される自動スケーリング設定
  AppRunnerASConfig:
    Type: AWS::AppRunner::AutoScalingConfiguration
    DeletionPolicy: Delete  # ★ 明示的に削除を指定
    UpdateReplacePolicy: Delete  # ★ 更新時も削除
    Properties:
      AutoScalingConfigurationName: !Sub "${ProjectName}-as-config"
      MinSize: !Ref AppRunnerMinSize
      MaxSize: !Ref AppRunnerMaxSize
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AppRunnerASConfig"
        - Key: ManagedBy
          Value: CloudFormation
        - Key: StackName
          Value: !Ref AWS::StackName
  # App Runner Service
  AppRunnerService:
    Type: AWS::AppRunner::Service
    DeletionPolicy: Delete  # ★ 確実に削除
    DependsOn:
      - AuroraDBInstance1
      - AppRunnerSGEgressRule
    Properties:
      ServiceName: !Sub "${ProjectName}-service"
      SourceConfiguration:
        ImageRepository:
          ImageIdentifier: !Ref ImageIdentifier
          ImageRepositoryType: !Ref ImageRepositoryType
          ImageConfiguration:
            Port: !Ref AppRunnerPort
            RuntimeEnvironmentVariables:
              - Name: PORT
                Value: !Sub "${AppRunnerPort}"
              - Name: DB_HOST
                Value: !GetAtt AuroraDBCluster.Endpoint.Address
              - Name: DB_PORT
                Value: !GetAtt AuroraDBCluster.Endpoint.Port
              - Name: DB_USER
                Value: !Ref DatabaseUsername
              - Name: DB_PASSWORD
                Value: !Ref DatabasePassword
              - Name: DB_NAME
                Value: !Ref DatabaseName
              - Name: GIN_MODE
                Value: release
        AutoDeploymentsEnabled: false  # ★ 削除時の問題を回避
        AuthenticationConfiguration:
          AccessRoleArn: !If [IsECRPrivate, !GetAtt AppRunnerECRAccessRole.Arn, !Ref "AWS::NoValue"]
      InstanceConfiguration:
        Cpu: !Ref AppRunnerCpu
        Memory: !Ref AppRunnerMemory
      NetworkConfiguration:
        EgressConfiguration:
          EgressType: VPC
          VpcConnectorArn: !Ref AppRunnerVPCConnector
      HealthCheckConfiguration:
        Protocol: HTTP
        Path: "/health"
        Interval: 20
        Timeout: 15
        HealthyThreshold: 1
        UnhealthyThreshold: 3
      AutoScalingConfigurationArn: !Ref AppRunnerASConfig
      Tags:
        - Key: Name
          Value: !Sub "${ProjectName}-AppRunnerService"
        - Key: ManagedBy
          Value: CloudFormation
        - Key: StackName
          Value: !Ref AWS::StackName
Conditions:
  IsECRPrivate: !Equals [!Ref ImageRepositoryType, "ECR"]
Outputs:
  AppRunnerServiceUrl:
    Value: !GetAtt AppRunnerService.ServiceUrl
  AuroraDBClusterEndpoint:
    Value: !GetAtt AuroraDBCluster.Endpoint.Address
  VPCId:
    Value: !Ref VPC
  AutoScalingConfigArn:
    Description: Auto Scaling Configuration ARN
    Value: !Ref AppRunnerASConfig